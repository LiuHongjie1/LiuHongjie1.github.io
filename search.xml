<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>操作系统的概念、功能</title>
      <link href="/2023/12/10/One/"/>
      <url>/2023/12/10/One/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;对《操作系统》的知识梳理  一</p><span id="more"></span><h2 id="零、计算机系统的结构层次"><a href="#零、计算机系统的结构层次" class="headerlink" title="零、计算机系统的结构层次"></a>零、计算机系统的结构层次</h2><img src="计算机系统的结构层次.jpg"  /><h2 id="一、操作系统的概念"><a href="#一、操作系统的概念" class="headerlink" title="一、操作系统的概念"></a>一、操作系统的概念</h2><p>&emsp;&emsp;操作系统(Operating System,OS)是指控制和<strong>管理</strong>整个计算机系统的<strong>硬件和软件资源</strong>，并合理地组织调动计算机的工作和资源的分配；以<strong>提供给用户和其他软件方便的接口和环境</strong>；它是计算机系统中最基本的系统软件。</p><p>&emsp;&emsp;例如：Windows操作系统的“任务管理器”</p><img src="例一.jpg" style="zoom:67%;" /><p>&emsp;&emsp;这个界面就可以看到正在运行的进程有哪些，还可以看到它们对CPU、内存等等硬件的使用情况。表现了操作系统对硬件和软件的管理者，同时它还向上层提供了方便易用的服务，是最接近硬件的一层软件。</p><h2 id="二、操作系统的功能和目标"><a href="#二、操作系统的功能和目标" class="headerlink" title="二、操作系统的功能和目标"></a>二、操作系统的功能和目标</h2><h3 id="1、作为系统资源的管理者"><a href="#1、作为系统资源的管理者" class="headerlink" title="1、作为系统资源的管理者"></a>1、作为系统资源的管理者</h3><p>&emsp;&emsp;操作系统作为系统资源的管理者，它的功能和目标如下所示：</p><img src="操作系统的功能和目标1.jpg" style="zoom:67%;" /><p>&emsp;&emsp;下面以实现QQ和朋友视频聊天的过程为例：</p><ul><li><p>在各个文件夹中找到QQ安装的位置</p></li><li><p>双击打开QQ.exe</p></li><li><p>QQ程序正常运行</p></li><li><p>开始和朋友视频聊天</p><p>第一步，逐层打开文件夹，找到QQ.exe这个程序的存放位置（<strong>操作系统的文件管理功能</strong>）。</p><p>第二步，双击打开QQ.exe的时候，操作系统会帮助我们把这个程序放到内存中（执行一个程序前，需要将该程序放到内存中，才能被CPU处理。<strong>操作系统的存储管理</strong>）。</p><p>第三步，QQ程序正常运行的时候，对应的进程被处理机（CPU）处理（<strong>操作系统的处理机管理</strong>）。</p><p>第四步，在视频聊天的过程中，操作系统把摄像头等设备资源分配给QQ使用（<strong>操作系统的设备管理</strong>）。</p></li></ul><p>在操作系统的学习中，主要就是学习它作为系统资源的管理者怎样实现这四个功能。</p><h3 id="2-向上层提供方便易用的服务"><a href="#2-向上层提供方便易用的服务" class="headerlink" title="2.向上层提供方便易用的服务"></a>2.向上层提供方便易用的服务</h3><img src="操作系统的功能和目标2.jpg" style="zoom:67%;" /><h4 id="1-GUI：图形化用户接口"><a href="#1-GUI：图形化用户接口" class="headerlink" title="1. GUI：图形化用户接口"></a>1. GUI：图形化用户接口</h4><p>&emsp;&emsp;用户可以使用形象的图形界面进行操作，而不再需要记忆复杂的命令、参数。例如：在Windows操作系统中，删除一个文件只需要把文件“拖拽”到回收站即可。</p><h4 id="2-命令接口"><a href="#2-命令接口" class="headerlink" title="2.命令接口"></a>2.命令接口</h4><p>&emsp;&emsp;在一些早期的操作系统中，让用户用命令接口的方式进行交互。</p><h5 id="emsp-emsp-1-联机命令接口实例（Windows系统）"><a href="#emsp-emsp-1-联机命令接口实例（Windows系统）" class="headerlink" title="&emsp;&emsp;1.联机命令接口实例（Windows系统）"></a>&emsp;&emsp;1.联机命令接口实例（Windows系统）</h5><p>&emsp;&emsp;联机命令接口 &#x3D; 交互式命令接口</p><p>&emsp;&emsp;特点：用户说一句，系统跟着做一句。例如，Windows系统中win+R，输入cmd打开命令解释器，使用time命令。</p><h5 id="emsp-emsp-2-脱机命令接口实例（Windows系统）"><a href="#emsp-emsp-2-脱机命令接口实例（Windows系统）" class="headerlink" title="&emsp;&emsp;2. 脱机命令接口实例（Windows系统）"></a>&emsp;&emsp;2. 脱机命令接口实例（Windows系统）</h5><p>&emsp;&emsp;脱机命令接口 &#x3D; 批处理命令接口</p><p>&emsp;&emsp;特点：用户说一堆，系统跟着做一堆。例如，运行*.bat文件。</p><h4 id="3-程序接口（即系统调用又称广义指令）"><a href="#3-程序接口（即系统调用又称广义指令）" class="headerlink" title="3.程序接口（即系统调用又称广义指令）"></a>3.程序接口（即系统调用又称广义指令）</h4><p>&emsp;&emsp;可以在程序中进行系统调用来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码间接使用。如：C语言中“Hello World”程序时，在 printf 函数的底层就使用到了操作系统提供的显式相关的“系统调用”</p><h3 id="3-作为最接近硬件的层次"><a href="#3-作为最接近硬件的层次" class="headerlink" title="3.作为最接近硬件的层次"></a>3.作为最接近硬件的层次</h3><p>&emsp;&emsp;需要实现实现<strong>对硬件机器的拓展</strong>。</p><p>&emsp;&emsp;没有任何软件支持的计算机称为<strong>裸机</strong>。在裸机上安装的操作系统，可以提供资源管理功能和方便用户的服务功能，将裸机改造成功能更强、使用更方便的机器。</p><p>&emsp;&emsp;通常把覆盖了软件的机器称为<strong>扩充机器</strong>，又称之为<strong>虚拟机</strong>。</p><p>&emsp;&emsp;操作系统对硬件机器的拓展：将CPU、内存、磁盘、显示器、键盘等硬件合理地组织起来，让各种硬件能够相互协调配合，实现更多更复杂的功能</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><img src="总结.jpg" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空想家</title>
      <link href="/2023/12/09/all/"/>
      <url>/2023/12/09/all/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;<strong>学计算机一定要有一个非常强大的心理状态：计算机的所有东西都是人做出来的，别人能想出来的，我也一定能想得出来。</strong></p><p>&emsp;&emsp;<strong>在计算机里头，没有任何黑魔法，所有的东西，只不过是我现在不知道而已，总有一天，我会把所有的细节，所有的内部的东西，全都搞明白的。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于mediapipe的姿态识别和简单行为识别</title>
      <link href="/2023/12/07/Zero/"/>
      <url>/2023/12/07/Zero/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;本文是基于mediapipe的姿态识别和简单行为识别，通过对人体姿态关键点的坐标的使用，实现简单的举手检测，其行为检测的精度主要取决于mediapipe关键点的检测精度。</p><span id="more"></span><h2 id="一、mediapipe的安装"><a href="#一、mediapipe的安装" class="headerlink" title="一、mediapipe的安装"></a>一、mediapipe的安装</h2><p>&emsp;&emsp;以Pycharm为例，直接在终端里面输入指令</p><blockquote><p>pip install  mediapipe</p></blockquote><p>&emsp;&emsp;等待下载完毕即可</p><h2 id="二、使用mediapipe检测关键点"><a href="#二、使用mediapipe检测关键点" class="headerlink" title="二、使用mediapipe检测关键点"></a>二、使用mediapipe检测关键点</h2><h3 id="1-mediapipe的介绍"><a href="#1-mediapipe的介绍" class="headerlink" title="1.mediapipe的介绍"></a>1.mediapipe的介绍</h3><p>   &emsp;&emsp;Mediapipe是一个用于构建机器学习管道的框架，用户处理视频、音频等时间序列数据。这个跨平台框架使用于桌面&#x2F;服务器、Android、ios和各类嵌入式设备。</p><p>   &emsp;&emsp;目前mediapipe包含以下16个solution，总的来说，mediapipe是一个很好的库，可以解决ML项目中面临的大部分麻烦，而且很适合做行为识别方向练手使用。</p><blockquote><p>1.人脸检测</p><p>2.Face Mesh</p><p>3.虹膜</p><p>4.手</p><p>5.姿态</p><p>6.人体</p><p>7.人物分割</p><p>8.头发分割</p><p>9.目标检测</p><p>10.Box Tracking</p><p>11.instant Motion Tracking</p><p>12.3D目标检测</p><p>13.特征匹配</p><p>14.AutoFlip</p><p>15.MediaSequence</p><p>16.YouTuBe_8M</p></blockquote><h3 id="2-使用mediapipe检测人体"><a href="#2-使用mediapipe检测人体" class="headerlink" title="2.使用mediapipe检测人体"></a>2.使用mediapipe检测人体</h3><p>&emsp;&emsp;这里仅使用mediapipe关于人体识别的方法（solution），谷歌官方将这种人体姿态识别的方法叫做Blazepose。</p><h4 id="（1）-检测前的准备工作"><a href="#（1）-检测前的准备工作" class="headerlink" title="（1） 检测前的准备工作"></a>（1） 检测前的准备工作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;导入一些基本的库&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> mediapipe <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFont, ImageDraw</span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment">#   mediapipe的初始化</span></span><br><span class="line"><span class="comment"># 这一步是必须的，因为要使用到以下定义的几个类</span></span><br><span class="line"><span class="comment">#   具体的函数参数意义可以参考第三方资料</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line">mp_pose = mp.solutions.pose</span><br><span class="line">mp_drawing = mp.solutions.drawing_utils</span><br><span class="line">pose = mp_pose.Pose(static_image_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（2）检测图片"><a href="#（2）检测图片" class="headerlink" title="（2）检测图片"></a>（2）检测图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_frame</span>(<span class="params">img</span>):</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    h, w = img.shape[<span class="number">0</span>], img.shape[<span class="number">1</span>] <span class="comment"># 高和宽</span></span><br><span class="line">    <span class="comment"># 调整字体</span></span><br><span class="line">    tl = <span class="built_in">round</span>(<span class="number">0.005</span> * (img.shape[<span class="number">0</span>] + img.shape[<span class="number">1</span>]) / <span class="number">2</span>) + <span class="number">1</span></span><br><span class="line">    tf = <span class="built_in">max</span>(tl-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># BRG--&gt;RGB</span></span><br><span class="line">    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">    <span class="comment"># 将RGB图像输入模型，获取 关键点 预测结果</span></span><br><span class="line">    results = pose.process(img_RGB)</span><br><span class="line">    keypoints = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>)]</span><br><span class="line">    <span class="keyword">if</span> results.pose_landmarks:</span><br><span class="line">        mp_drawing.draw_landmarks(img, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">            cx = <span class="built_in">int</span>(results.pose_landmarks.landmark[i].x * w)</span><br><span class="line">            cy = <span class="built_in">int</span>(results.pose_landmarks.landmark[i].y * h)</span><br><span class="line">            keypoints[i] = (cx, cy)</span><br><span class="line">            <span class="comment"># 得到最终的33个关键点</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NO PERSON&quot;</span>)</span><br><span class="line">        struction = <span class="string">&quot;NO PERSON&quot;</span></span><br><span class="line">        img = cv2.putText(img, struction, (<span class="number">25</span>, <span class="number">100</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1.25</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>),</span><br><span class="line">                          <span class="number">6</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    process_time = end_time - start_time</span><br><span class="line">    <span class="comment"># 图片关键点预测时间</span></span><br><span class="line">    fps = <span class="number">1</span> / process_time</span><br><span class="line">    <span class="comment"># 帧率</span></span><br><span class="line">    colors = [[random.randint(<span class="number">0</span>,<span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>)]</span><br><span class="line">    radius = [random.randint(<span class="number">8</span>,<span class="number">15</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">        cx, cy = keypoints[i]</span><br><span class="line">        <span class="comment">#if i in range(33):</span></span><br><span class="line">        img = cv2.circle(img, (cx, cy), radius[i], colors[i], -<span class="number">1</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;str_pose = get_pos(keypoints)#获取姿态</span></span><br><span class="line"><span class="string">    cv2.putText(img, &quot;POSE-&#123;&#125;&quot;.format(str_pose), (12, 100), cv2.FONT_HERSHEY_TRIPLEX,</span></span><br><span class="line"><span class="string">                tl / 3, (255, 0, 0), thickness=tf)&#x27;&#x27;&#x27;</span></span><br><span class="line">    cv2.putText(img, <span class="string">&quot;FPS-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(fps))), (<span class="number">12</span>, <span class="number">100</span>), cv2.FONT_HERSHEY_SIMPLEX,</span><br><span class="line">                tl/<span class="number">3</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>),thickness=tf)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  &emsp;&emsp; 如果需要执行代码，则加入主函数使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">img0 = cv2.imread(<span class="string">&quot;./data/outImage--20.jpg&quot;</span>)</span><br><span class="line">    image = cv2.imdecode(np.fromfile(image_path, dtype=np.uint8), -<span class="number">1</span>)</span><br><span class="line">    img = image.copy()</span><br><span class="line">    image = process_frame(img)</span><br><span class="line">    <span class="comment"># 使用matplotlib画图    </span></span><br><span class="line">    fig, axes = plt.subplots(nrows=<span class="number">1</span>, ncols=<span class="number">2</span>)</span><br><span class="line">    axes[<span class="number">0</span>].imshow(img0[:,:,::-<span class="number">1</span>])</span><br><span class="line">    axes[<span class="number">0</span>].set_title(<span class="string">&quot;原图&quot;</span>)</span><br><span class="line">    axes[<span class="number">1</span>].imshow(image[:,:,::-<span class="number">1</span>])</span><br><span class="line">    axes[<span class="number">1</span>].set_title(<span class="string">&quot;检测并可视化后的图片&quot;</span>)</span><br><span class="line">    plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">    plt.rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span></span><br><span class="line">    plt.show()</span><br><span class="line">    fig.savefig(<span class="string">&quot;./data/out.png&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（3）检测视频"><a href="#（3）检测视频" class="headerlink" title="（3）检测视频"></a>（3）检测视频</h4><p>&emsp;&emsp;任何不涉及3D卷积的机器视觉方法，检测视频其实就是检测图片，因为视频是由多帧图片融合得来的。比如说一个30帧的视频，那么它的每一秒钟，就是由30张图片叠加而成。将这些分割出的图片分别进行检测，最后将检测的图片进行融合，得到的就是检测后的视频。有了这个依据，我们就可以把图片检测过程写成一个函数，在视频的每一帧中调用这个函数就可以了。</p><p>&emsp;&emsp;一般使用OpenCV库将视频分解为图片帧的形式，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">video2image</span>(<span class="params">videoPath=<span class="string">&quot;./video/demo1.mp4&quot;</span>,</span></span><br><span class="line"><span class="params">                image_dir=<span class="string">&quot;./image&quot;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;videoPath是视频路径， image_dir是图片保存的文件夹路径&#x27;&#x27;&#x27;</span></span><br><span class="line">    cap = cv2.VideoCapture(videoPath)</span><br><span class="line">    frame_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(cap.isOpened()):</span><br><span class="line">        success,frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        frame_count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视频总帧数：&quot;</span>, frame_count)</span><br><span class="line">    cap.release()</span><br><span class="line">    cap = cv2.VideoCapture(videoPath)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=frame_count-<span class="number">1</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span>(cap.isOpened()):</span><br><span class="line">                success, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment">#处理帧</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> count % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">                        cv2.imwrite(<span class="string">&quot;&#123;&#125;/outImage--&#123;&#125;.jpg&quot;</span>.<span class="built_in">format</span>(image_dir, count), frame)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">if</span> success == <span class="literal">True</span>:</span><br><span class="line">                    pbar.update(<span class="number">1</span>)</span><br><span class="line">                    count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;中途中断&quot;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    cap.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视频已经处理结束，进行下一步操作！！！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;那么落实到本文想要实现的功能上，就可以在视频分解出的帧后面加上图片检测函数。<br>代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_video</span>(<span class="params">video_path=<span class="string">&quot;./Data.mp4&quot;</span></span>):</span><br><span class="line">    video_flag = <span class="literal">False</span></span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    out_path = <span class="string">&quot;./out_Data.mp4&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视频开始处理……&quot;</span>)</span><br><span class="line">    frame_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (cap.isOpened()):</span><br><span class="line">        success, frame = cap.read()</span><br><span class="line">        frame_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总帧数 = &quot;</span>, frame_count)</span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">if</span> video_flag == <span class="literal">False</span>:</span><br><span class="line">        frame_size = cap.get(cv2.CAP_PROP_FRAME_WIDTH), cap.get(cv2.CAP_PROP_FRAME_HEIGHT)</span><br><span class="line">        <span class="comment">#处理图像的尺寸。</span></span><br><span class="line">        fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">        <span class="comment">#保存视频文件的格式为mp4</span></span><br><span class="line">        fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">        out = cv2.VideoWriter(out_path, fourcc, fps, (<span class="built_in">int</span>(frame_size[<span class="number">0</span>]),<span class="built_in">int</span>(frame_size[<span class="number">1</span>])), )</span><br><span class="line">        <span class="comment">#输出图像的句柄</span></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=frame_count-<span class="number">1</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">                success, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> success:</span><br><span class="line">                    pbar.update(<span class="number">1</span>)</span><br><span class="line">                    frame = process_frame(frame)</span><br><span class="line">                    <span class="comment"># frame就是视频截取的帧，process_frame表示对其检测。</span></span><br><span class="line">                    cv2.namedWindow(<span class="string">&quot;frame&quot;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">                    cv2.imshow(<span class="string">&quot;frame&quot;</span>, frame)</span><br><span class="line">                    out.write(frame)</span><br><span class="line">                    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;中途中断&quot;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    out.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视频已保存至&quot;</span>, out_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、使用mediapipe-BlazePose检测自定义简单行为"><a href="#三、使用mediapipe-BlazePose检测自定义简单行为" class="headerlink" title="三、使用mediapipe-BlazePose检测自定义简单行为"></a>三、使用mediapipe-BlazePose检测自定义简单行为</h2><h3 id="1-原理介绍"><a href="#1-原理介绍" class="headerlink" title="1.原理介绍"></a>1.原理介绍</h3><p>&emsp;&emsp;将mediapipe用于行为检测是比较复杂的一件事；如果这样做，那么行为检测的精度完全取决于mediapipe关键点的检测精度，于是，可以根据下图中人的关节夹角来对人的姿势进行检测。</p><img src="人体关键点.jpg" alt="人体关键点" style="zoom:67%;" /><p>&emsp;&emsp;如举手的时候，手腕的15、16点应该是略高于0点，并且手臂于水平方向夹角一定是在80度到100度之间，那么这样就可以完成对举手动作的简单分类。</p><h3 id="2-实现过程"><a href="#2-实现过程" class="headerlink" title="2.实现过程"></a>2.实现过程</h3><p>&emsp;&emsp;首先要知道，由坐标求得矢量的公式，其实就是两个坐标相减。</p><p>&emsp;&emsp;如已知三点P0(x0,y0)、P1(x1,y1)和P2(x2,y2)，那么求P0P1和P0P2两个矢量之间的夹角公式,用代码描写如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v1 = (x1, y1) - (x2, y2)</span><br><span class="line">v2 = (x0, y0) - (x2, y2)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_angle</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    angle = np.dot(v1, v2) / (np.sqrt(np.<span class="built_in">sum</span>(v1 * v1)) * np.sqrt(np.<span class="built_in">sum</span>(v2 * v2)))</span><br><span class="line">    angle = np.arccos(angle) / <span class="number">3.14</span> * <span class="number">180</span></span><br><span class="line"></span><br><span class="line">    cross = v2[<span class="number">0</span>] * v1[<span class="number">1</span>] - v2[<span class="number">1</span>] * v1[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> cross &lt; <span class="number">0</span>:</span><br><span class="line">        angle = - angle</span><br><span class="line">    <span class="keyword">return</span> angle</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样就可以得到两个矢量的夹角。</p><p>&emsp;&emsp;之后就可以通过夹角对行为进行判断，这里的规则是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_pos</span>(<span class="params">keypoints</span>):</span><br><span class="line">    str_pose = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 计算左臂与水平方向的夹角</span></span><br><span class="line">    keypoints = np.array(keypoints)</span><br><span class="line">    p_x_right, p_y_right = keypoints[<span class="number">16</span>]</span><br><span class="line">    p_x_left, p_y_left = keypoints[<span class="number">15</span>]</span><br><span class="line">    p_x_right_body, p_y_right_body = keypoints[<span class="number">11</span>]</span><br><span class="line">    p_x_left_body, p_y_left_body = keypoints[<span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p_y_right &lt; p_y_right_body:</span><br><span class="line">        v1 = keypoints[<span class="number">14</span>] - keypoints[<span class="number">16</span>]</span><br><span class="line">        v2 = keypoints[<span class="number">12</span>] - keypoints[<span class="number">11</span>]</span><br><span class="line">        get_right_arm = <span class="built_in">abs</span>(get_angle(v1, v2))</span><br><span class="line">        <span class="comment"># print(&quot;R&#123;&#125;&quot;.format(get_right_arm))</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">60</span> &lt; get_right_arm &lt; <span class="number">120</span>:</span><br><span class="line">            str_pose = <span class="string">&quot;RIGHT RAISE&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> p_y_left &lt; p_y_left_body:</span><br><span class="line">        v1 = keypoints[<span class="number">13</span>] - keypoints[<span class="number">15</span>]</span><br><span class="line">        v2 = keypoints[<span class="number">11</span>] - keypoints[<span class="number">12</span>]</span><br><span class="line">        get_left_arm = <span class="built_in">abs</span>(get_angle(v1, v2))</span><br><span class="line">        <span class="comment"># print(&quot;L&#123;&#125;&quot;.format(get_left_arm))</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">60</span> &lt; get_left_arm &lt; <span class="number">120</span>:</span><br><span class="line">            str_pose = <span class="string">&quot;LEFT RAISE&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str_pose = <span class="string">&quot;NO RAISE&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_pose</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;得到的str_pose就是行为字符串，在process_frame中可以得到可视化结果。</p><h2 id="四、总结和一些结果展示"><a href="#四、总结和一些结果展示" class="headerlink" title="四、总结和一些结果展示"></a>四、总结和一些结果展示</h2><p>&emsp;&emsp;到这里，关键点检测与简单行为检测就已经全部结束了，这里是把基于tkinter的UI设计与mediapipe进行融合，实现可视化的交互过程，具体代码可以看<a href="https://github.com/LiuHongjie1/-mediapipe-.git">github</a>。</p><p>&emsp;&emsp;以下是一些样例 <del>感谢我的室友</del>。</p><img src="no raise.jpg" alt="no raise" style="zoom:67%;" /><img src="left raise.jpg" alt="left raise" style="zoom:67%;" /><img src="right raise.jpg" alt="right raise" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
